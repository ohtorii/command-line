/*
＊コマンド例
	!dir /b
	varren3.mac
	message("Hello world.")
*/

#g_open_newfile = false;
#g_new_hidemaru = 0;
#g_old_hidemaru = hidemaruhandle(0);

disablebreak;
call Main;
endmacro;



Main:
	call NewfileIfExist;
	if(##return==false){
		return false;
	}
	call MainLoop;
	clearupdated;
	//if(! ##result)
	{
		call CloseFileIfOpen;
	}
	return;


MainLoop:
	$$key_buffer="";
	$$cursor_pos="0";
	while(true){
		execmacro currentmacrodirectory+"\\command-line-internal\\input-keys.mac", $$key_buffer,$$cursor_pos;
		$$keybord_buffer=getresultex(-1);

		execmacro currentmacrodirectory+"\\command-line-internal\\parse_result.mac" , "keycode"		, $$keybord_buffer;
		$$keycode=getresultex(-1);
		execmacro currentmacrodirectory+"\\command-line-internal\\parse_result.mac" , "cursor"		, $$keybord_buffer;
		$$cursor_pos=getresultex(-1);
		execmacro currentmacrodirectory+"\\command-line-internal\\parse_result.mac" , "keybuffer"	, $$keybord_buffer;
		$$key_buffer=getresultex(-1);

		if($$keycode=="13"){
			/*Enterキーが押された*/
			call ProcessEnter $$key_buffer;
			$$key_buffer="";
		}else if($$keycode=="27"){
			//Escapeが押された
			return ;
		}else{
			/*pass*/
		}
	}
	return ;

ProcessEnter:
	$$key_buffer=$$1;
	if($$key_buffer==""){
		return;
	}
	if(leftstr($$key_buffer,1)=="!"){
		//シェル実行
		call RunShell $$key_buffer;
	}else{
		//秀丸マクロ or 秀丸マクロの関数
		call RunHidemaruCommand $$key_buffer;
	}
	return;

RunShell:
	//!を取り除く
	$$command=midstr($$1,1);
	runex "cmd.exe /c "+$$command
			, 0 			//sync	  0:async 1:sync
			, 0, "" 		//stdin   0:none 1:auto 2:file 3:(reserve) 4:all 5:select
			, 5, "" 		//stdout  0:none 1:auto 2:file 3:add file  4:new 5:insert 6:replace
			, 5, "" 		//stderr  0:none 1:=out 2:file 3:add file  4:new 5:insert 6:replace
			, 1, "" 		//folder  0:none 1:current 2:specify 3:(reserve) 4:exe's folder
			, 2 			//show	  0:auto 1:show 2:hide
			, 0 			//nodraw  0:draw 1:no draw
			, 0 			//unicode 0:ansi 2:unicode
			;
	return ;

RunHidemaruCommand:
	//todo: 空白区切りは文字列を解析できないのでよくない。
	//		（例）hoge.mac 1 2 "a b c";
	#g_token_num=split($g_token,$$1," ");

	//call DumpToken;
	if(#g_token_num==0){
		return ;
	}
	$$command = $g_token[0];
	//マクロディレクトリからファイルを探す
	$$abs_filename=macrodir+"\\"+$$command;
	if(existfile($$abs_filename)){
		call ExecMacro $$abs_filename;
		return ;
	}

	//マクロファイルが無ければ秀丸のコマンドとして実行する
	eval($$1);
	return ;

ExecMacro:
	$$abs_filename=$$1;
	if(#g_token_num==1){
		execmacro $$abs_filename;
	}else if(#g_token_num==2){
		execmacro $$abs_filename, $g_token[1];
	}else if(#g_token_num==3){
		execmacro $$abs_filename, $g_token[1], $g_token[2];
	}else if(#g_token_num==4){
		execmacro $$abs_filename, $g_token[1], $g_token[2], $g_token[3];
	}else if(#g_token_num==5){
		execmacro $$abs_filename, $g_token[1], $g_token[2], $g_token[3], $g_token[4];
	}else if(#g_token_num==6){
		execmacro $$abs_filename, $g_token[1], $g_token[2], $g_token[3], $g_token[4], $g_token[5];
	}
	return ;

DumpToken:
	debuginfo "==== DumpToken ====";
	##i=0;
	while(##i<#g_token_num){
		debuginfo "["+str(##i)+"]"+$g_token[##i];
		##i = ##i + 1;
	}
	return ;


NewfileIfExist:
	#g_open_newfile = false;
	if(filetype=="new"){
		/*見出しバー表示*/
		config "xOutlineBar:1";
		return true;
	}
	//編集中のテキストを上書きしないための対応。
	//新規ファイルを作成しそこへコマンドの実行結果を出力する。
	newfile;
	if(result==0){
		return false;
	}
	#g_open_newfile=true;
	#g_new_hidemaru=hidemaruhandle(0);
	/*見出しバー表示*/
	config "xOutlineBar:1";
	return true;


CloseFileIfOpen:
	if(#g_open_newfile){
		setactivehidemaru	#g_old_hidemaru;
		closehidemaruforced #g_new_hidemaru;

		#g_old_hidemaru=0;
		#g_new_hidemaru=0;
	}
	return true;
