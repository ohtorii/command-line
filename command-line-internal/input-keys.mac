/*コマンド入力処理

返値	keybord_buffer

		format:
			status key_buffer
			
			status	"0"		通常キーが押された、又はキー入力のタイムアウト発生
					"1"		Enterが押された
					"2"		Escapeが押された

			key_buffer	キー入力の文字列

		example:
			"0!dir"
			"1!dir /b"
			"2messa"
*/

disablebreak;

$g_keybuf		="";
#g_cursor_pos	=0;
$g_cursor_char="|";
//単語境界
$g_word_boundary=" ";

//_SplitKeybufラベルの返値
$g_temp_keybuf_left="";
$g_temp_keybuf_right="";

/*****************************************************************************
	メイン処理
*****************************************************************************/
$g_old_searchbuffer = searchbuffer;
#g_old_searchoption = searchoption;
#g_old_hidemaru     = hidemaruhandle(0);

$g_keybuf=getarg(0);
call Main;
#g_result=##return;
setsearch $g_old_searchbuffer, #g_old_searchoption;
if(#g_result){
	endmacro str(#g_result)+$g_keybuf;
}else{
	endmacro ;
}



/*
返値 	0  通常キーが押された、又はタイムアウト
		1  Enterキーが押された
		2  Escapeが押された
*/
Main:
	/*call Initialize;
	while(##return)*/
	{
		call _Show;
		if(false){
			##in = inputchar("");
			##ctrl=iskeydown(#K_CTRL);
			##alt=iskeydown(#K_ALT);
		}else{
			##in = inputchar("");
		}
		
		if ((0x20<=##in) && (##in<=0x7e)) call _Addchar char(##in);
		//カーソル移動
		else if (##in == 0x1C)		call _Left; 	// [←]
		else if (##in == 0x1E)		call _Right;	// [→]
		else if (##in == 0x1D)		call _Up;		// [↑]
		else if (##in == 0x1F)		call _Down; 	//[↓]
		else if (##in == 1) 		call _Home; 	// [Ctrl-a]
		else if (##in == 5) 		call _End;		// [Ctrl-e]
		else if (##in == 6) 		call _Right;	// [Ctrl-f]
		else if (##in == 2) 		call _Left; 	// [Ctrl-b]
		//else if (##in == )		call _KillWord; 	// [M-d]	×	メタキー(ALT)を認識しない
		//else if (##in == )		call _ForwardWord;	// [M-f]	×	メタキー(ALT)を認識しない
		//else if (##in == )		call _BackwardWord; // [M-b]	×	メタキー(ALT)を認識しない

		//履歴操作
		else if (##in == 16)		call _PreviousHistory;		// [Ctrl-p]
		else if (##in == 18)		call _ReverseSearchHistory; // [Ctrl-r]
		//テキスト処理
		else if (##in == 4) 		call _Del;			// [Ctrl-d]
		else if (##in == 20)		call _Transpose;	// [Ctrl-t]
		else if (##in == 11)		call _KillLine; 	// [Ctrl-k]
		else if (##in == 21)		call _LineDiscard;	// [Ctrl-u]
		else if (##in == 23)		call _WordRubout;	// [Ctrl-w]
		else if (##in == 0x08)		call _Back; 		// [Backspace]
		else if (##in == 0x7F)		call _Del;			// [Ctrl+Backspace]
		else if (##in == 14)		call _Clear;		// [Ctrl-N]	入力文字全削除
		//コマンド実行
		else if (##in == 10){		/*call _Return;*/	return 1;}	// c-j
		else if (##in == 13){		/*call _Return;*/	return 1;}	// Enter,c-m
		//その他
		else if (##in == 3){		/*call _Exit;*/ 	return 2;}	// ctrl-c
		else if (##in == 0x1B){ 	/*call _Escape;*/	return 2;}	// [Esc]
	}
	return 0;



Initialize:
	return true;


_Addchar:
	call _SplitKeybuf;
	$g_keybuf = $g_temp_keybuf_left + $$1 + $g_temp_keybuf_right;
	#g_cursor_pos=#g_cursor_pos+1;
	return true;


_Home:
	#g_cursor_pos=0;
	return true;

_End:
	#g_cursor_pos=strlen($g_keybuf);
	return true;

_Back:
	call _SplitKeybuf;
	$$left=leftstr($g_temp_keybuf_left,strlen($g_temp_keybuf_left)-1);
	$g_keybuf = $$left + $g_temp_keybuf_right;
	#g_cursor_pos=#g_cursor_pos-1;
	if(#g_cursor_pos<0){
		#g_cursor_pos=0;
	}
	return true;

_Del:
	call _SplitKeybuf;
	$$right=rightstr($g_temp_keybuf_right,strlen($g_temp_keybuf_right)-1);
	$g_keybuf = $g_temp_keybuf_left + $$right;
	return true;

//カーソル前後の文字を入れ替える。
//カーソルが行末にある場合は最後の2文字を入れ替える。
_Transpose:
	if(#g_cursor_pos<=0){
		return true;
	}
	##len=strlen($g_keybuf);
	if(##len<=1){
		return true;
	}
	if(##len <= #g_cursor_pos){
		//カーソルが行末にあるので最後の２文字を入れ替える。
		##last_index=##len-1;
		$$last_char0=midstr($g_keybuf,##last_index,1);
		$$last_char1=midstr($g_keybuf,##last_index-1,1);
		$g_keybuf=leftstr($g_keybuf,##len-2)+$$last_char0+$$last_char1;
		return true;
	}
	$$current_char=midstr($g_keybuf,#g_cursor_pos,1);
	$$prev_char=midstr($g_keybuf,#g_cursor_pos-1,1);
	$$left=leftstr($g_keybuf,#g_cursor_pos-1);
	$$right=midstr($g_keybuf,#g_cursor_pos+1);
	$g_keybuf=$$left+$$current_char+$$prev_char+$$right;
	#g_cursor_pos=#g_cursor_pos+1;
	return true;

//行末まで削除
_KillLine:
	$g_keybuf=leftstr($g_keybuf,#g_cursor_pos);
	return true;

//行頭まで削除
_LineDiscard:
	##len=strlen($g_keybuf);
	$g_keybuf=rightstr($g_keybuf,##len-#g_cursor_pos);
	#g_cursor_pos=0;
	return true;

//直後の一単語を削除
_KillWord:
	call _FindForwardWord;
	##word_end_index=##return;
	if(##word_end_index==-1){
		return true;
	}
	$g_keybuf=leftstr($g_keybuf,#g_cursor_pos)+midstr($g_keybuf,##word_end_index);
	//memo:カーソル位置は変わらない。
	return true;

//直前の一単語を削除
_WordRubout:
	call _FindBackWord;
	##word_start_index=##return;
	if(##word_start_index==-1){
		return true;
	}
	$g_keybuf=leftstr($g_keybuf,##word_start_index)+midstr($g_keybuf,#g_cursor_pos);
	#g_cursor_pos=##word_start_index;
	return true;

_Clear:
	#g_cursor_pos=0;
	$g_keybuf = "";
	return true;

_PreviousHistory:
	return true;

_ReverseSearchHistory:
	return true;

_Exit:
	return false;

_Escape:
	return false;

_Return:
	//eval($g_keybuf);
	return false;


_Left:
	#g_cursor_pos=#g_cursor_pos-1;
	if(#g_cursor_pos<0){
		#g_cursor_pos=0;
	}

	return true;

_Right:
	#g_cursor_pos=#g_cursor_pos+1;
	##len=strlen($g_keybuf);
	if(##len<#g_cursor_pos){
		#g_cursor_pos=##len;
	}
	return true;

_Up:
	return true;

_Down:
	return true;

//次の単語に移動
_ForwardWord:
	call _FindForwardWord;
	##word_end_index=##return;
	if(##word_end_index==-1){
		return true;
	}
	#g_cursor_pos=##word_end_index;
	return true;

//前の単語に移動
_BackwardWord:
	call _FindBackWord;
	##word_start_index=##return;
	if(##word_start_index==-1){
		return true;
	}
	#g_cursor_pos=##word_start_index;
	return true;

//次の単語を位置を探す
_FindForwardWord:
	##len=strlen($g_keybuf);
	if(#g_cursor_pos==##len){
		return -1;
	}
	//単語の開始位置を探す（カーソル位置の空白を後方に向かって読み飛ばす）
	##word_start_index=#g_cursor_pos;
	while(true){
		if(##word_start_index==##len){
			break;
		}
		if(midstr($g_keybuf,##word_start_index,1)!=$g_word_boundary){
			break;
		}
		##word_start_index=##word_start_index+1;
	}
	##word_end_index=strstr($g_keybuf,$g_word_boundary,##word_start_index);
	if(##word_end_index==-1){
		//最後まで削除対象とする
		##word_end_index=##len-1;
	}
	return ##word_end_index;


//前の単語位置を探す
_FindBackWord:
	if(#g_cursor_pos==0){
		return -1;
	}
	//単語の終了位置を探す（カーソル位置の空白を先頭に向かって読み飛ばす）
	##word_end_index=#g_cursor_pos - 1;
	while(true){
		if(##word_end_index==0){
			break;
		}
		if(midstr($g_keybuf,##word_end_index,1)!=$g_word_boundary){
			break;
		}
		##word_end_index=##word_end_index-1;
	}
	##word_start_index=strrstr($g_keybuf,$g_word_boundary,##word_end_index);
	if(##word_start_index==-1){
		//先頭から削除する
		##word_start_index=0;
	}else{
		//空白文字の直前までを削除対象にする
		##word_start_index=##word_start_index+1;
	}
	return ##word_start_index;

_Show:
	call _SplitKeybuf;
	title $g_temp_keybuf_left + $g_cursor_char + $g_temp_keybuf_right, 1;
	return true;

_SplitKeybuf:
	##len=strlen($g_keybuf);
	$g_temp_keybuf_left=leftstr($g_keybuf,#g_cursor_pos);
	$g_temp_keybuf_right=rightstr($g_keybuf,##len-#g_cursor_pos);
	return ##len;
